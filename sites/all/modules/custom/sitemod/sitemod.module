<?php

/**
 * Implements hook_form_alter().
 */
function sitemod_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'cause_node_form':
      $form['#validate'][] = 'sitemod_cause_node_validate';
      $form['title']['#description'] = t('The First Letter Of Each Word Must Be In Caps. 3-5 word max.');
      break;

    case 'apachesolr_search_custom_page_search_form':
      $form['#attributes']['class'][] = 'col-xs-12 col-sm-10 col-sm-offset-1';
      $form['basic']['submit']['#attributes']['class'][] = 'btn-default';
      $form['basic']['submit']['#value'] = 'Go';
      break;

    case 'giving_proposal_node_form':
      if (!user_access('administer nodes')) {
        unset($form['field_proposal_status']);
      }
      break;
  }
}

/**
 * Custom validation for research area field in cause nodes
 *
 * Check if a top level research area has been selected
 */
function sitemod_cause_node_validate($form, &$form_state) {
  $lang = $form['field_research_area']['#language'];
  $top_level_selected = 0;

  // Check if empty
  if ((count($form_state['values']['field_research_area'][$lang]) == 1) && ($form_state['values']['field_research_area'][$lang][0]['tid'] == NULL)) {
    return form_set_error('field_research_area', t('You must select a top-level (parent) research area.  Example: Life or Technology.'));
  }

  // Check if one is top level
  foreach ($form_state['values']['field_research_area'][$lang] as $research_area) {
    $parent = taxonomy_get_parents($research_area['tid']);
    if (empty($parent)) {
      $top_level_selected++;
    }
  }

  if (!$top_level_selected) {
    form_set_error('field_research_area', t('You must select a top-level (parent) research area. Example: Life or Technology.'));
  }
  elseif ($top_level_selected > 1) {
    form_set_error('field_research_area', t('You may only select 1 top-level (parent) research area. Example: Life or Technology.'));
  }
}

/**
 * Changing the text for share links
 */
function sitemod_service_links_alter(&$links) {
  $links['facebook']['name'] = t('Share on Facebook');
  $links['twitter']['name'] = t('Share on Twitter');
  $links['linkedin']['name'] = t('Share on LinkedIn');
}

/**
 * Used in display suite field "Search result - node link"
 */
function sitemod_node_link($entity) {
  if (isset($entity->nid)) {
    $alias = drupal_get_path_alias('node/' . $entity->nid);
    $full_path = url($alias, array('absolute' => true));
    $options = array(
      'attributes' => array(
        'class' => array('search-teaser-link'),
      ),
    );
    return l($full_path, $alias, $options);
  }
}

/**
 * Alter the results of entity_view() for profiles.
 *
 * @param $build
 *   A renderable array representing the profile content.
 *
 * This hook is called after the content has been assembled in a structured
 * array and may be used for doing processing which requires that the complete
 * profile content structure has been built.
 *
 * If the module wishes to act on the rendered HTML of the profile rather than
 * the structured content array, it may use this hook to add a #post_render
 * callback. Alternatively, it could also implement hook_preprocess_profile2().
 * See drupal_render() and theme() documentation respectively for details.
 *
 * @see hook_entity_view_alter()
 */
function sitemod_profile2_view_alter($build) {
  if ($build['#view_mode'] == 'account') {
    $build['#entity']->label = t('Financial Advisor Dashboard');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Set up additional variables for printing PDFs.
 */
function sitemod_preprocess_entity_print(&$variables) {
  $node_wrapper = entity_metadata_wrapper('node', $variables['entity']);

  $variables['fa_name'] = $variables['user']->name;

  // Basic fields.
  $variables['title'] = $node_wrapper->label();
  $variables['subtitle'] = $node_wrapper->field_subtitle->value();
  $variables['name'] = $node_wrapper->field_first_name->value() . ' ' . $node_wrapper->field_last_name->value();
  $variables['current_research'] = $node_wrapper->body->value->value();
  $variables['body'] = $node_wrapper->body->value->value();
  $variables['summary'] = text_summary($node_wrapper->field_summary->value->value(), 'filtered_html', 750);

  // Images.
  $picture = $node_wrapper->field_picture->value();
  $variables['picture'] = 'data:' . $picture['filemime'] . ';base64,' . base64_encode(file_get_contents($picture['uri']));
  $background = $node_wrapper->field_jumbotron_image->value();
  $variables['background'] = 'data:' . $background['filemime'] . ';base64,' . base64_encode(file_get_contents($background['uri']));

  // Current Position.
  $variables['affiliation'] = $node_wrapper->field_university_or_institution->label();

  $academic_positions = array();
  foreach ($node_wrapper->field_academic_position as $position) {
    list($post, $school, $when) = preg_split('/\<br\s?\/?>/i', $position->value()['safe_value']);
    if (isset($when) && stripos($when, 'current') !== FALSE) {
      $academic_positions[] = $post;
    }
  }
  if (!empty($academic_positions)) {
    $variables['academic_positions'] = implode('<br>', $academic_positions);
  }

  // Awards.
  $awards = array();
  foreach ($node_wrapper->field_awards as $award) {
    $awards[] = $award->field_award_title->value();
  }
  if (!empty($awards)) {
    $variables['awards'] = "<ul><li>" . implode("</li><li>", $awards) . "</li></ul>";
  }
}
