<?php

/**
 * Implements hook_form_alter().
 */
function sitemod_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'cause_node_form':
      $form['#validate'][] = 'sitemod_cause_node_validate';
      $form['title']['#description'] = t('The First Letter Of Each Word Must Be In Caps. 3-5 word max.');
      break;

    case 'apachesolr_search_custom_page_search_form':
      $form['#attributes']['class'][] = 'col-xs-12 col-sm-10 col-sm-offset-1';
      $form['basic']['submit']['#attributes']['class'][] = 'btn-default';
      $form['basic']['submit']['#value'] = 'Go';
      break;

    case 'views_form_cause_chooser_fulltext_entityreference_view_widget_1':
      // Add submit button on top.
      $form['actions_ervw']['cc_extra_button']['#type'] = 'submit';
      $form['actions_ervw']['cc_extra_button']['#value'] = t('Submit');
      $form['actions_ervw']['cc_extra_button']['#attributes'] = array('class' => array('btn', 'btn-purple'));
      $form['actions_ervw']['cc_extra_button']['#ajax'] = array('callback' => 'entityreference_view_widget_ajax');
      break;

    case 'giving_proposal_node_form':
      $form['#attached']['js'][] = drupal_get_path('module', 'bf_giving_proposal') . '/total-allocations.js';
      $lang = $form['language']['#value'];

      // Private fields.
      if (!user_access('administer nodes')) {
        unset($form['field_proposal_status']);
        unset($form['field_signature_request_id']);
      }

      // Never user accessible, these fields will be generated.
      $form['field_giving_proposal']['#disabled'] = TRUE;
//      $form['field_additional_documents']['#disabled'] = TRUE;

      // Change all button values "Remove" => "Remove this profile".
      for ($i = 0; $i <= $form['field_donor_profile'][$lang]['#max_delta']; $i++) {
        $form['field_donor_profile'][$lang][$i]['remove_button']['#value'] = t('Remove this profile');
      }

      // Change "Add another item" => "Add another profile" + button class.
      $form['field_donor_profile'][$lang]['add_more']['#value'] = t('Add another profile');
      $form['field_donor_profile'][$lang]['add_more']['#attributes']['class'][] = 'btn btn-default';
      break;
  }
}

/**
 * Custom validation for research area field in cause nodes
 *
 * Check if a top level research area has been selected
 */
function sitemod_cause_node_validate($form, &$form_state) {
  $lang = $form['field_research_area']['#language'];
  $top_level_selected = 0;

  // Check if empty
  if ((count($form_state['values']['field_research_area'][$lang]) == 1) && ($form_state['values']['field_research_area'][$lang][0]['tid'] == NULL)) {
    return form_set_error('field_research_area', t('You must select a top-level (parent) research area.  Example: Life or Technology.'));
  }

  // Check if one is top level
  foreach ($form_state['values']['field_research_area'][$lang] as $research_area) {
    $parent = taxonomy_get_parents($research_area['tid']);
    if (empty($parent)) {
      $top_level_selected++;
    }
  }

  if (!$top_level_selected) {
    form_set_error('field_research_area', t('You must select a top-level (parent) research area. Example: Life or Technology.'));
  }
  elseif ($top_level_selected > 1) {
    form_set_error('field_research_area', t('You may only select 1 top-level (parent) research area. Example: Life or Technology.'));
  }
}

/**
 * Implements hook_service_links().
 */
function sitemod_service_links() {
  $links['shorturl'] = array(
    'name' => t('Permalink'),
    'link' => NULL,
    'description' => 'Permalink',
    'module' => 'sitemod',
  );
  return $links;
}

/**
 * Changing the text for share links
 */
function sitemod_service_links_alter(&$links) {
  $links['facebook']['name'] = t('Share on Facebook');
  $links['twitter']['name'] = t('Share on Twitter');
  $links['linkedin']['name'] = t('Share on LinkedIn');
  if ($node = menu_get_object('node')) {
    $links['shorturl']['link'] = url(bf_cause_get_short_alias($node), array('absolute' => TRUE));
  }
}

/**
 * Used in display suite field "Search result - node link"
 */
function sitemod_node_link($entity) {
  if (isset($entity->nid)) {
    $alias = drupal_get_path_alias('node/' . $entity->nid);
    $full_path = url($alias, array('absolute' => true));
    $options = array(
      'attributes' => array(
        'class' => array('search-teaser-link'),
      ),
    );
    return l($full_path, $alias, $options);
  }
}

/**
 * Alter the results of entity_view() for profiles.
 *
 * @param $build
 *   A renderable array representing the profile content.
 *
 * This hook is called after the content has been assembled in a structured
 * array and may be used for doing processing which requires that the complete
 * profile content structure has been built.
 *
 * If the module wishes to act on the rendered HTML of the profile rather than
 * the structured content array, it may use this hook to add a #post_render
 * callback. Alternatively, it could also implement hook_preprocess_profile2().
 * See drupal_render() and theme() documentation respectively for details.
 *
 * @see hook_entity_view_alter()
 */
function sitemod_profile2_view_alter($build) {
  if ($build['#view_mode'] == 'account') {
    $build['#entity']->label = t('Financial Advisor Dashboard');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Set up additional variables for printing PDFs.
 */
function sitemod_preprocess_entity_print(&$variables) {
  $node_wrapper = entity_metadata_wrapper('node', $variables['entity']);

  // Basic fields.
  $variables['title'] = $node_wrapper->label();
  $variables['subtitle'] = $node_wrapper->field_subtitle->value();
  $variables['name'] = $node_wrapper->field_first_name->value() . ' ' . $node_wrapper->field_last_name->value();
  $variables['short_url'] = bf_cause_get_short_alias($variables['entity']);

  // Body + Summary, they are sometimes empty.
  $body = $node_wrapper->body->value();
  $summary = $node_wrapper->field_summary->value();
  $variables['summary'] = views_trim_text(array(
    'max_length' => 2000,
    'word_boundary' => TRUE,
    'ellipsis' => TRUE,
    'html' => TRUE,
  ), $body['value'] . $summary['value']);

  // Images.
  $picture = $node_wrapper->field_picture->value();
  $variables['picture'] = 'data:' . $picture['filemime'] . ';base64,' . base64_encode(file_get_contents($picture['uri']));
  $background = $node_wrapper->field_jumbotron_image->value();
  $variables['background'] = 'data:' . $background['filemime'] . ';base64,' . base64_encode(file_get_contents($background['uri']));

  // Current Position.
  $variables['affiliation'] = $node_wrapper->field_university_or_institution->label();
  $affiliation = entity_metadata_wrapper('taxonomy_term', $node_wrapper->field_university_or_institution[0]->raw());
  $logo = $affiliation->field_logo->value();
  if (!empty($logo)) {
    $variables['affiliation_logo'] = 'data:' . $logo['filemime'] . ';base64,' . base64_encode(file_get_contents($logo['uri']));
  }

  $academic_positions = array();
  foreach ($node_wrapper->field_academic_position as $position) {
    $post_array = preg_split('/\<br\s?\/?>/i', $position->value()['safe_value']);
    if (!isset($post_array[2]) || stripos($post_array[2], 'current') !== FALSE || preg_match('/\d{4}/', strip_tags($post_array[2]))) {
      $academic_positions[] = $post_array[0];
    }
    elseif (isset($post_array[3]) && (stripos($post_array[3], 'current') !== FALSE || preg_match('/\d{4}/', strip_tags($post_array[3])))) {
      $academic_positions[] = $post_array[0] . ', ' . $post_array[1];
    }
    elseif (isset($post_array[4]) && (stripos($post_array[4], 'current') !== FALSE || preg_match('/\d{4}/', strip_tags($post_array[4])))) {
      $academic_positions[] = $post_array[0] . ', ' . $post_array[1];
    }
  }
  if (!empty($academic_positions)) {
    $variables['academic_positions'] = implode('<br>', $academic_positions);
  }

  // Awards.
  $awards = array();
  foreach ($node_wrapper->field_awards as $award) {
    $awards[] = $award->field_award_title->value();
  }
  if (!empty($awards)) {
    $variables['awards'] = theme('item_list', array('items' => $awards));
  }

  // Education.
  $education = array();
  foreach ($node_wrapper->field_education as $degree) {
    $education[] = strtr($degree->value()['value'], array(
      '<br>' => ',',
      '<br/>' => ',',
      '<br />' => ',',
    ));
  }
  if (!empty($education)) {
    $variables['education'] = theme('item_list', array('items' => $education));
  }

  // Research Categories.
  $categories = array();
  foreach ($node_wrapper->field_research_area as $area) {
    $categories[] = $area->label();
  }
  if (!empty($categories)) {
    $variables['research_areas'] = theme('item_list', array('items' => $categories));
  }

  // Contribution.
  $contribution = $node_wrapper->field_call_to_action->value();
  $variables['contribution'] = $contribution['value'];
}

/**
 * Implements hook_entity_print_pdf_alter().
 */
function sitemod_entity_print_pdf_alter(WkHtmlToPdf $pdf, $entity_type, $entity) {
  $options = array(
    'ignoreWarnings' => TRUE,
    'no-outline',
    'margin-top'    => 10,
    'margin-right'  => 5,
    'margin-bottom' => 0,
    'margin-left'   => 10,
//    'disable-smart-shrinking',
  );
  $pdf->setOptions($options);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Set up additional variables for printing PDFs.
 */
function sitemod_preprocess_search_result(&$variables) {
  $result = $variables['search_teaser'];
  if(strlen($result['snippet']) < 10) {
    $variables['snippet'] = drupal_substr($result['node']->body[LANGUAGE_NONE][0]['value'], 160);
  }
}

/**
 * Implements hook_page_build().
 *
 * Injects the HubSpot JavaScript tracking code into the page footer, just
 * before </body>. Taken from HubSpot module, http://cgit.drupalcode.org/hubspot/tree/hubspot.module?h=7.x-3.x
 */
function sitemod_page_build(&$page) {
  $page['page_bottom']['hubspot_code'] = array(
    '#type' => 'markup',
    '#markup' => variable_get('hubspot_log_code', '<!-- Start of HubSpot Embed Code -->
      <script type="text/javascript" id="hs-script-loader" async defer src="//js.hs-scripts.com/3065600.js"></script>
      <!-- End of HubSpot Embed Code -->'),
  );
}
