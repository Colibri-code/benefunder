<?php

/**
 * Implements hook_menu().
 */
function create_proposal_menu() {
  $items['execute_proposal/%'] = array(
    'title' => 'Send Proposal',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('create_proposal_execute_confirm', 1),
    'access callback' => array('create_proposal_execute_access'),
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function create_proposal_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'giving_proposal_node_form') {
    $form['ajax_feedback'] = array(
      '#type' => 'container'
    );
    $form['ajax_feedback']['ajax_text'] = array(
      '#type' => 'textarea',
      '#title' => t('Get Help'),
      '#description' => t('Alert Benefunder right away!'),
      '#weight' => 10,
    );
    $form['ajax_feedback']['ajax_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
      '#ajax' => array(
        'callback' => 'create_proposal_ajax_checkin',
        'wrapper' => 'edit-ajax-feedback',
        'effect' => 'fade',
        'speed' => 2000,
      ),
      '#weight' => 20,
    );
    $form['#group_children']['ajax_feedback'] = 'group_check_1';

    // Second feedback form.
    $form['ajax_feedback2'] = $form['ajax_feedback'];
    $form['ajax_feedback2']['ajax_text2'] = $form['ajax_feedback2']['ajax_text'];
    unset($form['ajax_feedback2']['ajax_text']);
    $form['ajax_feedback2']['ajax_submit']['#ajax']['wrapper'] = 'edit-ajax-feedback2';
    $form['#group_children']['ajax_feedback2'] = 'group_check_2';
  }
}

/**
 * Handle the ajax request to get help on a proposal.
 */
function create_proposal_ajax_checkin($form, $form_state) {
  global $user;

  $text = $form_state['values']['ajax_text'];
  if (empty($text)) {
    $text = $form_state['values']['ajax_text2'];
  }
  // TODO: correct email address.
  $to = 'karl.scheirer@gmail.com';
  $language =  user_preferred_language($user);

  drupal_mail('create_proposal', 'proposal_help', $to, $language, array(
    '@text' => $text,
  ));

  return 'Thanks for your feedback, Benefunder staff will be in touch soon!';
}

/**
 * Menu access to execute a proposal.
 */
function create_proposal_execute_access($proposal_nid) {
  global $user;

  $proposal = node_load($proposal_nid);

  return (!empty($proposal) && ($proposal->uid == $user->uid) || user_access('administer nodes'));
}

/**
 * Confirm proposal execute.
 */
function create_proposal_execute_confirm($form, &$form_state, $proposal_nid) {
  $form['proposal_nid'] = array(
    '#type' => 'value',
    '#value' => $proposal_nid,
  );

  return confirm_form(
    $form,
    t('Are you sure you want to send this proposal?'),
    'user',
    t('Are you sure you want to send this proposal? This will convert the proposal to a Giving Plan and sent it via HelloSign. This action cannot be undone.'),
    t('Send Proposal'),
    t('Cancel')
  );
}

/**
 * Proposal execution confirmed, time to do it.
 *
 * @throws \EntityMetadataWrapperException
 */
function create_proposal_execute_confirm_submit($form, &$form_state) {

  $wrapper = entity_metadata_wrapper('node', $form_state['values']['proposal_nid']);
  create_proposal_generate_additional_documents($wrapper->value());

  // Send giving proposal to HelloSign.
  $title = $wrapper->label();
  $subject = 'Signature required for Benefunder giving proposal';
  $signers = array(
    // TODO: use actual client email.
    'karl.scheirer@gmail.com' => 'Karl Scheirer',
  );
  // CC emails are configured on the site.

  // Attach files, these will appear as 1 document to sign.
  $files[] = $wrapper->field_giving_proposal->value()['uri'];
  $files[] = $wrapper->field_additional_documents->value()['uri'];

  // TODO: Add static content?
//  $files[] = drupal_get_path('module', 'create_proposal') . '/proposal_static.pdf';

  $mode = 'email';

  $result = hellosign_generate_esignature_request($title, $subject, $signers, $files, $mode);

  if ($result['status'] != 1) {
    $problem_msg = t('There was a problem sending the proposal to HelloSign, please contact Benefunder.');
    drupal_set_message($problem_msg, 'error');
  }
  else {
    // Success!
    drupal_set_message(t('Proposal %name sent out for signatures at HelloSign', array('%name' => $title)));

    // Store the signature_request_id.
    $wrapper->field_signature_request_id = $result['signature_request_id'];

    // Set to pending status.
    create_proposal_set_status('Pending Acceptance', $wrapper);
    $wrapper->save();
  }

  // Send user back to dashboard.
  drupal_goto('user');
}

/**
 * Implements hook_theme().
 */
function create_proposal_theme($existing, $type, $theme, $path) {
  return array(
    'entity_print__node' => array(
      'base hook' => 'entity_print',
      'template' => 'entity-print--node--cause',
    ),
    'proposal_extra' => array(
      'template' => 'proposal-extra',
      'variables' => array('proposal_wrapper' => NULL),
    ),
  );
}

/**
 * Implements hook_preprocess_hook() for proposal-extra.tpl.php.
 */
function create_proposal_preprocess_proposal_extra(&$variables) {
  $node_wrapper = entity_metadata_wrapper('node', $variables[0]);

  $bank_address = $node_wrapper->field_bank_address->value();

  $variables['aba_number'] = $node_wrapper->field_aba_number_for_wires->value();
  $variables['ach_number'] = $node_wrapper->field_ach->value();
  $variables['bank_name'] = $node_wrapper->field_bank_name->value();
  $variables['account_holder'] = $node_wrapper->field_account_holder->value();
  $variables['account_number'] = $node_wrapper->field_account_number->value();
  $variables['bank_street'] = $node_wrapper->field_bank_address->thoroughfare->value();
  $variables['bank_city_state'] = implode(', ', array(
    $bank_address['locality'],
    $bank_address['administrative_area'],
    $bank_address['postal_code'],
    $bank_address['country'],
  ));
  $variables['swift_code'] = $node_wrapper->field_swift_code->value();
}

/**
 * Create addendum PDF document and attach to node.
 *
 * @throws \Exception
 */
function create_proposal_generate_additional_documents($proposal) {
  $problem_msg = t('There was a problem creating a proposal addendum, please contact Benefunder.');

  if (($library = libraries_load('phpwkhtmltopdf')) && !empty($library['loaded'])) {
    $pdf = new WkHtmlToPdf();

    $html = theme('proposal_extra', array($proposal));
    $pdf->addPage($html);

    $filename = transliteration_clean_filename($proposal->title . '_addendum.pdf');
    $content = $pdf->toString();

    if ($content === FALSE) {
      watchdog('create_proposal', 'PDF content error: ' . $pdf->getError(), array(), WATCHDOG_ERROR);
      drupal_set_message($problem_msg, 'error');
      return;
    }

    $file = file_save_data($content, 'private://' . $filename, FILE_EXISTS_REPLACE);
    if (!$file) {
      watchdog('create_proposal', 'File save error: ' . $pdf->getError(), array(), WATCHDOG_ERROR);
      drupal_set_message($problem_msg, 'error');
    }
    else {
      $file->display = '1';
      $proposal->field_additional_documents[LANGUAGE_NONE][0] = (array) $file;
      node_save($proposal);
    }
  }
}

/**
 * Implements hook_node_presave().
 *
 * Create a new proposal PDF and attach. Fires on insert/update.
 */
function create_proposal_node_presave($node) {
  $problem_msg = t('There was a problem creating a proposal PDF, please contact Benefunder.');
  if ($node->type != 'giving_proposal') {
    return;
  }
  if (!isset($node->field_cause[LANGUAGE_NONE][0]['field_cause_name'][LANGUAGE_NONE][0]['target_id'])) {
    // No causes selected.
    return;
  }

  if (($library = libraries_load('phpwkhtmltopdf')) && !empty($library['loaded'])) {
    $pdf = new WkHtmlToPdf(array(
      'ignoreWarnings' => TRUE,
      'no-outline',
      'margin-top'    => 0,
      'margin-right'  => 0,
      'margin-bottom' => 0,
      'margin-left'   => 0,

      // Default page options
      'disable-smart-shrinking',
      //    'user-style-sheet' => '/path/to/pdf.css',
    ));

    $options = array('run-script' => array('https://use.typekit.net/jxh1lif.js'));
    $pdf->setOptions($options);

    // Add page for each cause.
    foreach ($node->field_cause[LANGUAGE_NONE] as $collection) {
      $cause_nid = $collection['field_cause_name'][LANGUAGE_NONE][0]['target_id'];
      $cause_node = node_load($cause_nid);
      if (!empty($cause_node)) {
        $html = _entity_print_get_generated_html('node', $cause_node);
        $pdf->addPage($html);
        $allocations[] = array(
          $cause_node->title,
          $collection['field_cause_allocation'][LANGUAGE_NONE]['item']['value'] . '%',
        );
      }
    }

    // Add summary table of cause and allocation percentages.
    $header = array('Cause', 'Allocation Percantage');
    $table = theme('table', array('header' => $header, 'rows' => $allocations));
    $pdf->addPage('<html><body>' . $table . '</body></html>');

    $filename = transliteration_clean_filename($node->title . '_proposal.pdf');
    $content = $pdf->toString();

    if ($content === FALSE) {
      watchdog('create_proposal', 'PDF content error: ' . $pdf->getError(), array(), WATCHDOG_ERROR);
      drupal_set_message($problem_msg, 'error');
      return;
    }

    $file = file_save_data($content, 'private://' . $filename, FILE_EXISTS_REPLACE);
    if (!$file) {
      watchdog('create_proposal', 'File save error: ' . $pdf->getError(), array(), WATCHDOG_ERROR);
      drupal_set_message($problem_msg, 'error');
    }
    else {
      $file->display = '1';
      $node->field_giving_proposal[LANGUAGE_NONE][0] = (array) $file;
    }
  }
}

/**
 * HelloSign Callback Hook.
 *
 * @param array $data
 *   The data sent by HelloSign.
 */
function create_proposal_process_hellosign_callback(array $data) {

  // Log callback.
  watchdog('proposal', 'HelloSign event received: @event', array('@event' => print_r($data, 1)));

  // Find proposal node with matching request id.
  $signature_request_id = $data->signature_request->signature_request_id;
  $q = new EntityFieldQuery();
  $q->fieldCondition('field_signature_id', $signature_request_id);
  $q->entityCondition('bundle', 'giving_proposal');
  $q->range(0, 1);
  $result = $q->execute();

  if (isset($result['node'])) {
    $proposal_nid = current(array_keys($result['node']));
    $wrapper = entity_metadata_wrapper('node', $proposal_nid);
    $event = $data->event->event_type;

    switch ($event) {
      // Execute initial disbursements.
      case 'signature_request_all_signed':
        create_proposal_signature_all_signed($proposal_nid, $event->signatures);
        break;

      // Handle signature rejection.
      case 'signature_request_declined':
        create_proposal_signature_declined($proposal_nid);
        break;
    }
    $wrapper->save();
  }
  else {
    watchdog('proposal', 'No proposal found with signature request id %id', array(
      '%id' => $signature_request_id,
    ), WATCHDOG_ERROR);
  }
}

/**
 * Lookup and set proposal status field on a giving proposal.
 *
 * @param $status
 * @param $wrapper
 */
function create_proposal_set_status($status, $wrapper) {
  $term_array = taxonomy_get_term_by_name($status, 'plan_status');
  $wrapper->field_proposal_status = array_pop($term_array)->tid;
}

/**
 * Sends a disbursement letter to each school involved.
 *
 * @param $proposal_nid
 */
function create_proposal_signature_all_signed($proposal_nid, $signatures_array) {
  $proposal_wrapper = entity_metadata_wrapper('node', $proposal_nid);

  // Group causes by school.
  $proposal_schools = array();
  foreach ($proposal_wrapper->field_cause as $collection) {
    $schools = $collection->field_cause_name->field_university_or_institution->value();
    foreach($schools as $school) {
      $proposal_schools[$school->tid][] = array(
        'cause_id' => $collection->field_cause_name->getIdentifier(),
        'cause_alloc' => $collection->field_cause_allocation->value(),
      );
    }
  }

  // Send email to DAF to disburse funds to each school.
  $daf_email = $proposal_wrapper->field_daf_provider->field_daf_email->value();
  foreach ($proposal_schools as $school_tid => $cause_arrays) {
    $school_wrapper = entity_metadata_wrapper('taxonomy_term', $school_tid);

    // Calculate amount to disburse initially.
    setlocale(LC_MONETARY, 'en_US');
    $amount = $proposal_wrapper->field_planned_initial_contributi->value();
    $frequency = $proposal_wrapper->field_disbursement_frequency->value();
    if ($frequency == 'Quarterly') {
      $amount = $amount / 4;
      // TODO: Better calculation for the initial disbursement amount?
      $amount = $amount * ($proposal_wrapper->field_what_is_the_intended_distr->value() / 100);
    }

    // TODO: Split amount by the various cause allocation percentages?
//    foreach ($cause_arrays as $cause_array) {
//      $cause_amount *= number_format($amount * $cause_array['cause_alloc'] / 100, 2);
//      $params['causes'][] = array();
//    }

    $params = array(
      '@institution_name' => $school_wrapper->label(),
      '@freq' => $frequency,
      '@aba' => $school_wrapper->field_daf_aba->value(),
      '@ach' => $school_wrapper->field_daf_ach->value(),
      '@account_num' => $school_wrapper->field_daf_account_number->value(),
      '@money_amount' => money_format('%i', $amount),
    );
    // TODO: Include gift letter somehow. PDF attachment?
    drupal_mail('create_proposal', 'disburse', $daf_email, LANGUAGE_NONE, $params);
  }

  $status = ($frequency == 'Quarterly') ? 'Continuing' : 'Complete';
  create_proposal_set_status($status, $proposal_wrapper);
}

/**
 * Proposal declined by at least one signer.
 *
 * @param $proposal_nid
 */
function create_proposal_signature_declined($proposal_nid) {
  $wrapper = entity_metadata_wrapper('node', $proposal_nid);
  create_proposal_set_status('Rejected', $wrapper);
  // TODO: Alert Benefunder.
}

/**
 * Implements hook_mail().
 */
function create_proposal_mail($key, &$message, $params) {
  switch ($key) {
    case 'proposal_help':
      $message['subject'] = t('Help has been requested');
      $body = "Request:\n @text";
      break;

    case 'disburse':
      $message['subject'] = t('Disbursement request to @school', array('@school' => $params['@institution_name']));
      $body = <<<ENDDISBURSE
Please send @money_amount to @institution_name.\n
Frequency: @freq\n
ABA: @aba\n
ACH: @ach\n
Account Number: @account_num\n
\n
Thank You,\n
Benefunder Staff\n
ENDDISBURSE;
      break;

    case 'researcher-confirmation':
      $message['subject'] = t('Good news! Funding arrived through Benefunder.com');
      $body = <<<ENDCONFIRMATION
Dear @researcher,\n
\n
Benefunder is pleased to let you know that @amount has been donated to your lab. Funding is expected
to arrive within 30 days, please contact us at @benefunder.com if you have any questions.\n
\n
A funds transfer request was provided to @bankname on @date with the following details:\n
Transfer request number: @reqnum\n
Amount: @amount\n
Payee: @payee\n
\n
Congratulations,\n
Benefunder Staff\n
ENDCONFIRMATION;
      break;

    case 'donor-thank-you':
      $message['subject'] = t('Thank you for your donation');
      $body = <<<ENDTHANKYOU
Dear @names,\n
\n
Thank you! We are elated by your decision to support research through Benefunder.com. Your gift will have a big impact on
their work. It will also serve as an example for others to connect - through Benefunder  - to researchers more directly
than was ever possible before.\n
\n
We would love to arrange a lab visit including a tour, discussion, and an opportunity to meet the students
and postdocs involved. Benefunder will arrange the details if you would like to take advantage of this opportunity.\n
\n
Again, thank you so much for your generous gift. We hope that today marks the beginning of a long and fulfilling
relationship.\n
\n
Best wishes,\n
@researcher and Benefunder Staff\n
ENDTHANKYOU;
      break;
  }
  $message['body'][] = strtr($body, $params);
}

/**
 * Get Gift Letter body.
 *
 * Not in hook_mail since we never send this letter directly.
 *
 * @return string
 */
function _create_proposal_get_gift_letter_body() {
  return <<<ENDGIFT
@payee_name\n
c/o @payee_contact_name\n
@payee_address\n
@payee_city, @payee_state @payee_zip\n
\n
@date\n
\n
Dear @payee_contact_name,\n
\n
I am pleased to attach a grant from Benefunder Foundation to @payee_name. An account advisor has recommended the following grant:\n
\n
Donor Advised Account Name: @source\n
Grantee Organization: @payee_name\n
Amount: @amount\n
Grant Purpose: For @researcher lab\n
\n
The grant is a gift from Benefunder Foundation and must be used for the purposes outlined in @researcher's profile as
presented on the Benefunder website:\n
\n
@profile_url\n
\n
A funds transfer request was provided to @bankname on @date with the following details:\n
Transfer request number: @reqnum\n
Amount: @amount\n
Payee: @payee_name\n
\n
Sincerely,
Christian Braemer, CEO\n
\n
Benefunder Foundation Tax Identification Number: 46-430321\n
4790 Eastgate Mall Suite #125\n
San Diego, CA 92121\n
(858) 215-1136\n
ENDGIFT;
}
