<?php

/**
 * Implements hook_menu().
 */
function create_proposal_menu() {
  $items['execute_proposal/%'] = array(
    'title' => 'Send Proposal',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('create_proposal_execute_confirm', 1),
    'access callback' => array('create_proposal_execute_access'),
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function create_proposal_execute_access($proposal_nid) {
  global $user;

  $proposal = node_load($proposal_nid);

  return (!empty($proposal) && ($proposal->uid == $user->uid) || user_access('administer nodes'));
}

function create_proposal_execute_confirm($form, &$form_state, $proposal_nid) {
  $form['proposal_nid'] = array(
    '#type' => 'value',
    '#value' => $proposal_nid,
  );

  return confirm_form(
    $form,
    t('Are you sure you want to send this proposal?'),
    'user',
    t('Are you sure you want to send this proposal? This will convert the proposal to a Giving Plan and sent it via HelloSign. This action cannot be undone.'),
    t('Send Proposal'),
    t('Cancel')
  );
}

function create_proposal_execute_confirm_submit($form, &$form_state) {

  $wrapper = entity_metadata_wrapper('node', $form_state['values']['proposal_nid']);

  // Unpublish giving proposal.
//  $wrapper->status = 0;
//  $wrapper->save();

  // Create a giving plan node in status pending.
  $plan = new stdClass();
  $plan->type = 'giving_plan';
  $plan->title = $wrapper->label();
  $plan->language = LANGUAGE_NONE;
  $plan->uid = $wrapper->author->raw();
  node_object_prepare($plan);
  $plan->field_planned_initial_contributi[$plan->language][0]['value'] = $wrapper->field_planned_initial_contributi->value();
  $plan->field_planned_annual_contributio[$plan->language][0]['value'] = $wrapper->field_planned_annual_contributio->value();

  // Set to pending status.
  $term_array = taxonomy_get_term_by_name('Pending', 'plan_status');
  $plan->field_plan_status[$plan->language][]['tid'] = array_pop($term_array)->tid;

  // Save Plan.
  node_save($plan);

  // Add Causes and Allocations.
  foreach ($wrapper->field_cause as $collection) {
    $c = $collection->value();
    $target_id = $c->field_cause_name[LANGUAGE_NONE][0]['target_id'];
    $alloc = $c->field_cause_allocation[LANGUAGE_NONE][0]['value'];

    $fc = entity_create('field_collection_item', array('field_name' => 'field_cause'));
    $fc->setHostEntity('node', $plan);
    $fc->save(TRUE);

    $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc);
    $fc_wrapper->field_cause_name = $target_id;
    $fc_wrapper->field_cause_allocation = $alloc;
    $fc_wrapper->save();
  }

  // TODO: Send giving plan to HelloSign.

  // Send user back to dashboard.
  drupal_goto('user');

}

/**
 * Implements hook_theme().
 */
function create_proposal_theme($existing, $type, $theme, $path) {
  return array(
    'entity_print__node' => array(
      'base hook' => 'entity_print',
      'template' => 'entity-print--node--cause',
    ),
  );
}

/**
 * Implements hook_node_presave().
 *
 * Create a new proposal PDF and attach. Fires on insert/update.
 */
function create_proposal_node_presave($node) {
  $problem_msg = t('There was a problem creating a proposal PDF, please contact Benefunder.');
  if ($node->type != 'giving_proposal') {
    return;
  }
  if (!isset($node->field_cause[LANGUAGE_NONE][0]['field_cause_name'][LANGUAGE_NONE][0]['target_id'])) {
    // No causes selected.
    return;
  }

  if (($library = libraries_load('phpwkhtmltopdf')) && !empty($library['loaded'])) {
    $pdf = new WkHtmlToPdf(array(
      'ignoreWarnings' => TRUE,
      'no-outline',
      'margin-top'    => 0,
      'margin-right'  => 0,
      'margin-bottom' => 0,
      'margin-left'   => 0,

      // Default page options
      'disable-smart-shrinking',
      //    'user-style-sheet' => '/path/to/pdf.css',
    ));

    $options = array('run-script' => array('https://use.typekit.net/jxh1lif.js'));
    $pdf->setOptions($options);

    // Add page for each cause.
    foreach ($node->field_cause[LANGUAGE_NONE] as $collection) {
      $cause_nid = $collection['field_cause_name'][LANGUAGE_NONE][0]['target_id'];
      $cause_node = node_load($cause_nid);
      if (!empty($cause_node)) {
        $html = _entity_print_get_generated_html('node', $cause_node);
        $pdf->addPage($html);
        $allocations[] = array(
          $cause_node->title,
          $collection['field_cause_allocation'][LANGUAGE_NONE]['item']['value'] . '%',
        );
      }
    }

    // Add summary table of cause and allocation percentages.
    $header = array('Cause', 'Allocation Percantage');
    $table = theme('table', array('header' => $header, 'rows' => $allocations));
    $pdf->addPage('<html><body>' . $table . '</body></html>');

    $filename = transliteration_clean_filename($node->title . '_proposal.pdf');
    $content = $pdf->toString();

    if ($content === FALSE) {
      watchdog('create_proposal', 'PDF content error: ' . $pdf->getError(), array(), WATCHDOG_ERROR);
      drupal_set_message($problem_msg, 'error');
      return;
    }

    $file = file_save_data($content, 'private://' . $filename, FILE_EXISTS_REPLACE);
    if (!$file) {
      watchdog('create_proposal', 'File save error: ' . $pdf->getError(), array(), WATCHDOG_ERROR);
      drupal_set_message($problem_msg, 'error');
    }
    else {
      $file->display = '1';
      $node->field_giving_proposal[LANGUAGE_NONE][0] = (array) $file;
    }
  }
}
