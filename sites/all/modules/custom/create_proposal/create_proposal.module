<?php

/**
 * Implements hook_menu().
 */
function create_proposal_menu() {
  $items['execute_proposal/%'] = array(
    'title' => 'Send Proposal',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('create_proposal_execute_confirm', 1),
    'access callback' => array('create_proposal_execute_access'),
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu access to execute a proposal.
 */
function create_proposal_execute_access($proposal_nid) {
  global $user;

  $proposal = node_load($proposal_nid);

  return (!empty($proposal) && ($proposal->uid == $user->uid) || user_access('administer nodes'));
}

/**
 * Confirm proposal execute.
 */
function create_proposal_execute_confirm($form, &$form_state, $proposal_nid) {
  $form['proposal_nid'] = array(
    '#type' => 'value',
    '#value' => $proposal_nid,
  );

  return confirm_form(
    $form,
    t('Are you sure you want to send this proposal?'),
    'user',
    t('Are you sure you want to send this proposal? This will convert the proposal to a Giving Plan and sent it via HelloSign. This action cannot be undone.'),
    t('Send Proposal'),
    t('Cancel')
  );
}

/**
 * Proposal execution confirmed, time to do it.
 *
 * @throws \EntityMetadataWrapperException
 */
function create_proposal_execute_confirm_submit($form, &$form_state) {

  $wrapper = entity_metadata_wrapper('node', $form_state['values']['proposal_nid']);
  create_proposal_generate_additional_documents($wrapper->value());

  // Send giving proposal to HelloSign.
  $title = $wrapper->label();
  $subject = 'Signature required for Benefunder giving proposal';
  $signers = array(
    // TODO: use actual client email.
    'karl.scheirer@gmail.com' => 'Karl Scheirer',
  );
  // CC emails are configured on the site.

  // Attach files, these will appear as 1 document to sign.
  $files[] = $wrapper->field_giving_proposal->value()['uri'];
  $files[] = $wrapper->field_additional_documents->value()['uri'];

  // TODO: Add static content?
//  $files[] = drupal_get_path('module', 'create_proposal') . '/proposal_static.pdf';

  $mode = 'email';

  $result = hellosign_generate_esignature_request($title, $subject, $signers, $files, $mode);

  if ($result['status'] != 1) {
    $problem_msg = t('There was a problem sending the proposal to HelloSign, please contact Benefunder.');
    drupal_set_message($problem_msg, 'error');
  }
  else {
    // Success!
    drupal_set_message(t('Proposal %name sent out for signatures at HelloSign', array('%name' => $title)));

    // Store the signature_request_id.
    $wrapper->field_signature_request_id = $result['signature_request_id'];

    // Set to pending status.
    $term_array = taxonomy_get_term_by_name('Pending Acceptance', 'plan_status');
    $wrapper->field_proposal_status = array_pop($term_array)->tid;

    $wrapper->save();
  }

  // Send user back to dashboard.
  drupal_goto('user');
}

/**
 * Implements hook_theme().
 */
function create_proposal_theme($existing, $type, $theme, $path) {
  return array(
    'entity_print__node' => array(
      'base hook' => 'entity_print',
      'template' => 'entity-print--node--cause',
    ),
    'proposal_extra' => array(
      'template' => 'proposal-extra',
      'variables' => array('proposal_wrapper' => NULL),
    ),
  );
}

/**
 * Implements hook_preprocess_hook() for proposal-extra.tpl.php.
 */
function create_proposal_preprocess_proposal_extra(&$variables) {
  $node_wrapper = entity_metadata_wrapper('node', $variables[0]);

  $bank_address = $node_wrapper->field_bank_address->value();

  $variables['aba_number'] = $node_wrapper->field_aba_number_for_wires->value();
  $variables['ach_number'] = $node_wrapper->field_ach->value();
  $variables['bank_name'] = $node_wrapper->field_bank_name->value();
  $variables['account_holder'] = $node_wrapper->field_account_holder->value();
  $variables['account_number'] = $node_wrapper->field_account_number->value();
  $variables['bank_street'] = $node_wrapper->field_bank_address->thoroughfare->value();
  $variables['bank_city_state'] = implode(', ', array(
    $bank_address['locality'],
    $bank_address['administrative_area'],
    $bank_address['postal_code'],
    $bank_address['country'],
  ));
  $variables['swift_code'] = $node_wrapper->field_swift_code->value();
}

/**
 * Create addendum PDF document and attach to node.
 *
 * @throws \Exception
 */
function create_proposal_generate_additional_documents($proposal) {
  $problem_msg = t('There was a problem creating a proposal addendum, please contact Benefunder.');

  if (($library = libraries_load('phpwkhtmltopdf')) && !empty($library['loaded'])) {
    $pdf = new WkHtmlToPdf();

    $html = theme('proposal_extra', array($proposal));
    $pdf->addPage($html);

    $filename = transliteration_clean_filename($proposal->title . '_addendum.pdf');
    $content = $pdf->toString();

    if ($content === FALSE) {
      watchdog('create_proposal', 'PDF content error: ' . $pdf->getError(), array(), WATCHDOG_ERROR);
      drupal_set_message($problem_msg, 'error');
      return;
    }

    $file = file_save_data($content, 'private://' . $filename, FILE_EXISTS_REPLACE);
    if (!$file) {
      watchdog('create_proposal', 'File save error: ' . $pdf->getError(), array(), WATCHDOG_ERROR);
      drupal_set_message($problem_msg, 'error');
    }
    else {
      $file->display = '1';
      $proposal->field_additional_documents[LANGUAGE_NONE][0] = (array) $file;
      node_save($proposal);
    }
  }
}

/**
 * Implements hook_node_presave().
 *
 * Create a new proposal PDF and attach. Fires on insert/update.
 */
function create_proposal_node_presave($node) {
  $problem_msg = t('There was a problem creating a proposal PDF, please contact Benefunder.');
  if ($node->type != 'giving_proposal') {
    return;
  }
  if (!isset($node->field_cause[LANGUAGE_NONE][0]['field_cause_name'][LANGUAGE_NONE][0]['target_id'])) {
    // No causes selected.
    return;
  }

  if (($library = libraries_load('phpwkhtmltopdf')) && !empty($library['loaded'])) {
    $pdf = new WkHtmlToPdf(array(
      'ignoreWarnings' => TRUE,
      'no-outline',
      'margin-top'    => 0,
      'margin-right'  => 0,
      'margin-bottom' => 0,
      'margin-left'   => 0,

      // Default page options
      'disable-smart-shrinking',
      //    'user-style-sheet' => '/path/to/pdf.css',
    ));

    $options = array('run-script' => array('https://use.typekit.net/jxh1lif.js'));
    $pdf->setOptions($options);

    // Add page for each cause.
    foreach ($node->field_cause[LANGUAGE_NONE] as $collection) {
      $cause_nid = $collection['field_cause_name'][LANGUAGE_NONE][0]['target_id'];
      $cause_node = node_load($cause_nid);
      if (!empty($cause_node)) {
        $html = _entity_print_get_generated_html('node', $cause_node);
        $pdf->addPage($html);
        $allocations[] = array(
          $cause_node->title,
          $collection['field_cause_allocation'][LANGUAGE_NONE]['item']['value'] . '%',
        );
      }
    }

    // Add summary table of cause and allocation percentages.
    $header = array('Cause', 'Allocation Percantage');
    $table = theme('table', array('header' => $header, 'rows' => $allocations));
    $pdf->addPage('<html><body>' . $table . '</body></html>');

    $filename = transliteration_clean_filename($node->title . '_proposal.pdf');
    $content = $pdf->toString();

    if ($content === FALSE) {
      watchdog('create_proposal', 'PDF content error: ' . $pdf->getError(), array(), WATCHDOG_ERROR);
      drupal_set_message($problem_msg, 'error');
      return;
    }

    $file = file_save_data($content, 'private://' . $filename, FILE_EXISTS_REPLACE);
    if (!$file) {
      watchdog('create_proposal', 'File save error: ' . $pdf->getError(), array(), WATCHDOG_ERROR);
      drupal_set_message($problem_msg, 'error');
    }
    else {
      $file->display = '1';
      $node->field_giving_proposal[LANGUAGE_NONE][0] = (array) $file;
    }
  }
}

/**
 * HelloSign Callback Hook.
 *
 * @param array $data
 *   The data sent by HelloSign.
 */
function create_proposal_process_hellosign_callback(array $data) {

  // Log callback.
  watchdog('proposal', 'HelloSign event received: @event', array('@event' => print_r($data, 1)));

  $signature_request_id = $data->signature_request->signature_request_id;
  $event = $data->event->event_type;

  // Find proposal node with matching request id.
  $q = new EntityFieldQuery();
  $q->fieldCondition('field_signature_id', $signature_request_id);
  $q->entityCondition('bundle', 'giving_proposal');
  $q->range(0, 1);
  $result = $q->execute();

  if (isset($result['node'])) {
    $proposal_nid = current(array_keys($result['node']));

    switch ($event) {
      // Execute initial disbursements.
      case 'signature_request_all_signed':
        create_proposal_signature_all_signed($proposal_nid);
        break;

      // Handle signature rejection.
      case 'signature_request_declined':
        create_proposal_signature_declined($proposal_nid);
        break;
    }
  }
}

/**
 * Sends a disbursement letter to each school involved.
 *
 * @param $proposal_nid
 */
function create_proposal_signature_all_signed($proposal_nid) {
  $wrapper = entity_metadata_wrapper('node', $proposal_nid);

  $proposal_schools = array();
  foreach ($wrapper->field_cause as $collection) {
    $schools = $collection->field_cause->field_university_or_institution->value();
    $proposal_schools[$schools[0]->id][] = $wrapper->id();
  }

  foreach ($proposal_schools as $school) {
    // Send email to DAF to disburse funds to school.
    // Include gift letter somehow. pdf attachment?
  }

}

function create_proposal_signature_declined($proposal_nid) {
  // Alert Benefunder.
}

/**
 * Implements hook_mail().
 */
function create_proposal_mail($key, &$message, $params) {
  switch ($key) {
    case '';
      break;
  }
}
