<?php

/**
 * Implements hook_form_alter().
 */
function create_proposal_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'giving_proposal_node_form') {
    // Second save button up top, both read Save & Continue.
    $form['actions']['submit']['#value'] = t('Save & Continue');
    $form['actions']['submit']['#attributes']['class'][] = 'action-blue';
    $form['submit-top'] = $form['actions']['submit'];
    $form['submit-top']['#weight'] = 0;

    // Add ajax feedback form.
    $form['ajax_feedback'] = array(
      '#type' => 'container'
    );
    $form['ajax_feedback']['ajax_text'] = array(
      '#type' => 'textarea',
      '#title' => t('Get Help'),
      '#description' => t('Alert Benefunder right away!'),
      '#weight' => 10,
    );
    $form['ajax_feedback']['ajax_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
      '#ajax' => array(
        'callback' => 'create_proposal_ajax_checkin',
        'wrapper' => 'edit-ajax-feedback',
        'effect' => 'fade',
        'speed' => 2000,
      ),
      '#weight' => 20,
    );
    $form['#group_children']['ajax_feedback'] = 'group_check_1';

    // Second feedback form.
    $form['ajax_feedback2'] = $form['ajax_feedback'];
    $form['ajax_feedback2']['ajax_text2'] = $form['ajax_feedback2']['ajax_text'];
    unset($form['ajax_feedback2']['ajax_text']);
    $form['ajax_feedback2']['ajax_submit']['#ajax']['wrapper'] = 'edit-ajax-feedback2';
    $form['#group_children']['ajax_feedback2'] = 'group_check_2';

    // Additional validation.
    $form['#validate'][] = 'create_proposal_validate';

    // Additional submit.
    $form['#submit'][] = 'create_proposal_submit';

    // Add descriptions to Research Stages field.
    foreach ($form['field_donor_profile'][LANGUAGE_NONE] as $key => $profile) {
      foreach ($profile['field_research_stages'][LANGUAGE_NONE]['#options'] as $tid => $option) {
        $term = taxonomy_term_load($tid);
        $form['field_donor_profile'][LANGUAGE_NONE][$key]['field_research_stages'][LANGUAGE_NONE]['#options'][$tid] .= ' - <i>' . $term->description . '</i>';
      }
    }

  }
}

/**
 * Validate a giving proposal form.
 */
function create_proposal_validate($form, $form_state) {
  // If ready to send, make sure we have some emails.
  if ($form_state['values']['field_ready_to_send'] && empty($form_state['values']['field_signer_emails'])) {
    form_set_error('field_signer_emails', t('You must provide all signer emails before the proposal can be processed.'));
  }
}

/**
 * Handle the ajax request to get help on a proposal.
 */
function create_proposal_ajax_checkin($form, $form_state) {
  global $user;

  $text = $form_state['values']['ajax_text'];
  if (empty($text)) {
    $text = $form_state['values']['ajax_text2'];
  }
  $to = 'info@benefunder.com';
  $language =  user_preferred_language($user);

  drupal_mail('create_proposal', 'proposal_help', $to, $language, array(
    '@text' => $text,
  ));

  return t('Thanks for your feedback, Benefunder staff will be in touch soon!');
}

/**
 * Proposal execution confirmed, time to do it.
 *
 * @throws \EntityMetadataWrapperException
 */
function create_proposal_submit($form, &$form_state) {
  $wrapper = entity_metadata_wrapper('node', $form_state['values']['nid']);

  // TODO: fix field names.
  if (FALSE && $wrapper->field_ready_to_send->value() && !create_proposal_sent_to_hellosign($wrapper)) {
    create_proposal_send_to_hellosign($wrapper);
  }

  // DAF Disbursement confirmed.
  if (FALSE && $wrapper->field_daf_disbursement_confirmed->value() && !create_proposal_sent_confirmations($wrapper)) {
    create_proposal_send_confirmations($wrapper);
  }
}

/**
 * Implements hook_node_presave().
 */
function create_proposal_node_presave($node) {
  // Generate proposal PDF.
  create_proposal_generate_pdf($node);
}

function create_proposal_sent_confirmation() {
  // TODO: FIX.
  return FALSE;
}

function create_proposal_sent_to_hellosign($wrapper) {
  return ($wrapper->field_signature_request_id->value() > 0);
}

/**
 * Generate proposal PDF.
 *
 * @param $node
 *
 * @throws \Exception
 */
function create_proposal_generate_pdf($node) {
  // Generate proposal PDF and attach to node.
  if (($library = libraries_load('phpwkhtmltopdf')) && !empty($library['loaded'])) {
    $problem_msg = t('There was a problem creating a proposal PDF, please contact Benefunder.');
    $pdf = new WkHtmlToPdf();

    // Attach cover page.
    $pdf->addCover(theme('proposal_cover', array('proposal' => $node)));


    // Attach needs assessment.
    foreach ($node->field_donor_profile[LANGUAGE_NONE] as $donor_profile) {
      $pdf->addPage(trim(theme('proposal_needs_assessment', array('donor_profile' => $donor_profile))));
    }

    // Attach giving history.
    $pdf->addPage(trim(theme('proposal_giving_history', array('proposal' => $node))));

    // Add page for each cause.
    foreach ($node->field_cause[LANGUAGE_NONE] as $collection) {
      $cause_nid = $collection['field_cause_name'][LANGUAGE_NONE][0]['target_id'];
      $cause_node = node_load($cause_nid);
      if (!empty($cause_node)) {
        $html = _entity_print_get_generated_html('node', $cause_node);

        // Remove script tags, the cover page includes this already.
        $html = strtr($html, array(
          '<script src="https://use.typekit.net/jxh1lif.js"></script>' => '',
          '<script>try{Typekit.load({ async: true });}catch(e){}</script>' => '',
        ));
        $pdf->addPage(trim($html));
//        $a[] = array(
//          $cause_node->title,
//          $collection['field_cause_allocation'][LANGUAGE_NONE]['item']['value'] . '%',
//        );
      }
    }

    // Add proposed giving plan.
    $pdf->addPage(trim(theme('proposal_giving_plan', array('proposal' => $node))));

    $filename = transliteration_clean_filename($node->title . '_proposal.pdf');
    $content = $pdf->toString();

    if ($content === FALSE) {
      watchdog('create_proposal', 'PDF content error: ' . $pdf->getError(), array(), WATCHDOG_ERROR);
      drupal_set_message($problem_msg, 'error');
      return;
    }

    $file = file_save_data($content, 'private://' . $filename, FILE_EXISTS_REPLACE);
    if (!$file) {
      watchdog('create_proposal', 'File save error: ' . $pdf->getError(), array(), WATCHDOG_ERROR);
      drupal_set_message($problem_msg, 'error');
    }
    else {
      $file->display = '1';
      $node->field_giving_proposal[LANGUAGE_NONE][0] = (array) $file;
    }
  }
}

/**
 * DAF Disbursement confirmed, send confirmation emails.
 *
 * @param $wrapper
 *
 * @return array
 * @throws \Exception
 */
function create_proposal_send_confirmations($wrapper) {
  $amount = _create_proposal_calculate_disbusement_amount($wrapper);

  // Send confirmation to each researcher.
  foreach ($wrapper->field_cause[LANGUAGE_NONE] as $collection) {
    $cause_nid = $collection['field_cause_name'][LANGUAGE_NONE][0]['target_id'];
    $cause_node = node_load($cause_nid);
    if (!empty($cause_node)) {
      $params = array(
        '@researcher' => $cause_node->field_first_name->value(),
        '@date' => new Date('m/d/Y'),
        '@reqnum' => $wrapper->field_disbursement_tracking_numb[LANGUAGE_NONE]['value'],
        '@amount' => money_format('%i', number_format($amount * $collection->field_cause_allocation->value(), 2)),
        '@payee' => $wrapper->title[LANGUAGE_NONE]['value'],
      );
      drupal_mail('create_proposal', 'researcher-confirmation', $cause_node->field_email->value(), LANGUAGE_NONE, $params);
    }
  }

  // Send thank-you to each donor.
  foreach ($wrapper->field_signer_emails[LANGUAGE_NONE] as $collection) {
    $params = array('@name' => $collection['field_signer_name'][LANGUAGE_NONE][0]['value']);
    $email = $params['@name'] . '<' . $collection['field_signer_email'][LANGUAGE_NONE][0]['value'] . '>';
    drupal_mail('create_proposal', 'donor-thank-you', $email, LANGUAGE_NONE, $params);
  }
}

/**
 * Send giving proposal to HelloSign.
 *
 * @param $wrapper
 *
 * @return null|string
 */
function create_proposal_send_to_hellosign($wrapper) {
  $title = $wrapper->label();
  $subject = 'Signature required for Benefunder giving proposal';
  $signers = _create_proposal_get_signers($wrapper);

  // CC the DAF provider.
  $cc_emails = array($wrapper->field_daf_provider->field_daf_email->value());

  // Attach files, these will appear as 1 document to sign.
  $files[] = $wrapper->field_giving_proposal->value()['uri'];

  // If using addendum attach here.
  if ($wrapper->field_already_have_daf->value()) {
    $files[] = $wrapper->field_daf_provider->field_benefunder_addendum->value()['uri'];
  }

  // Attach additional files?
//    create_proposal_generate_additional_documents($wrapper->value());
//    $files[] = $wrapper->field_additional_documents->value()['uri'];

  // Add static content?
//  $files[] = drupal_get_path('module', 'create_proposal') . '/proposal_static.pdf';

  $mode = 'email';

  $result = hellosign_generate_esignature_request($title, $subject, $signers, $files, $mode, $cc_emails);

  if ($result['status'] != 1) {
    drupal_set_message(t('There was a problem sending the proposal to HelloSign, please contact Benefunder.'), 'error');
  }
  else {
    // Success!
    drupal_set_message(t('Proposal %name sent out for signatures at HelloSign', array('%name' => $title)));

    // Store the signature_request_id.
    $wrapper->field_signature_request_id = $result['signature_request_id'];

    // Set to pending status.
    _create_proposal_set_status('Pending Acceptance', $wrapper);
    $wrapper->save();
  }
}

/**
 * Implements hook_theme().
 */
function create_proposal_theme($existing, $type, $theme, $path) {
  return array(
    'entity_print__node' => array(
      'base hook' => 'entity_print',
      'template' => 'entity-print--node--cause',
    ),
    'proposal_needs_assessment' => array(
      'template' => 'proposal-needs-assessment',
      'variables' => array('donor_profile' => NULL),
    ),
    'proposal_cover' => array(
      'template' => 'proposal-cover',
      'variables' => array('proposal' => NULL),
    ),
    'proposal_giving_history' => array(
      'template' => 'proposal-giving-history',
      'variables' => array('proposal' => NULL),
    ),
    'proposal_giving_plan' => array(
      'template' => 'proposal-giving-plan',
      'variables' => array('proposal' => NULL),
    )
  );
}

/**
 * Implements hook_preprocess_hook() for proposal-cover.tpl.php.
 */
function create_proposal_preprocess_proposal_cover(&$variables) {
  $proposal = $variables['proposal'];

  $variables['name'] = $proposal->title;

  $background = base64_encode(file_get_contents(drupal_get_path('module', 'create_proposal') . '/proposal-cover.png'));
  $variables['background'] = 'data:png;base64,' . $background;
}

/**
 * Implements hook_preprocess_hook() for proposal-needs-assessment.tpl.php.
 */
function create_proposal_preprocess_proposal_needs_assessment(&$variables) {
  $donor_profile = $variables['donor_profile'];

  $background = base64_encode(file_get_contents(drupal_get_path('module', 'create_proposal') . '/proposal-cover.png'));
  $variables['background'] = 'data:png;base64,' . $background;

  if (isset($donor_profile['field_donor_name'][LANGUAGE_NONE])) {
    $variables['name'] = $donor_profile['field_donor_name'][LANGUAGE_NONE][0]['value'];
  }

  if (isset($donor_profile['field_relationship'][LANGUAGE_NONE])) {
    $variables['relationship'] = $donor_profile['field_relationship'][LANGUAGE_NONE][0]['value'];
  }

  if (isset($donor_profile['field_alumni_affiliations'][LANGUAGE_NONE])) {
    foreach ($donor_profile['field_alumni_affiliations'][LANGUAGE_NONE] as $term) {
      $terms[] = $term['name'];
    }
    $variables['alumni_associations'] = implode(', ', $terms);
  }

  if (isset($donor_profile['field_what_problems_are_you_most'][LANGUAGE_NONE])) {
    $variables['what_problems_are_you_most'] = $donor_profile['field_what_problems_are_you_most'][LANGUAGE_NONE][0]['value'];
  }

  if (isset($donor_profile['field_philanthropic_interests'][LANGUAGE_NONE])) {
    $variables['philanthropic_interests'] = $donor_profile['field_philanthropic_interests'][LANGUAGE_NONE][0]['value'];
  }

  if (isset($donor_profile['field_what_is_your_primary_motiv'][LANGUAGE_NONE])) {
    $variables['what_is_your_primary_motiv'] = $donor_profile['field_what_is_your_primary_motiv'][LANGUAGE_NONE][0]['value'];
  }

  if (isset($donor_profile['field_in_addition_to_providing_f'][LANGUAGE_NONE])) {
    $variables['in_addition_to_providing_f'] = $donor_profile['field_in_addition_to_providing_f'][LANGUAGE_NONE][0]['value'];
  }

  if (isset($donor_profile['field_research_stages'][LANGUAGE_NONE])) {
    foreach ($donor_profile['field_research_stages'][LANGUAGE_NONE] as $stage) {
      $term = taxonomy_term_load($stage['tid']);
      $stages[] = $term->name;
    }
    $variables['research_stages'] = implode(', ', $stages);
  }
  if (isset($donor_profile['field_accomplishments'][LANGUAGE_NONE])) {
    foreach ($donor_profile['field_accomplishments'][LANGUAGE_NONE] as $accomplishment) {
      $accomplishments[] = $accomplishment['value'];
    }
    $variables['accomplishments'] = implode(', ', $accomplishments);
  }
  if (isset($donor_profile['field_engagements'][LANGUAGE_NONE])) {
    foreach ($donor_profile['field_engagements'][LANGUAGE_NONE] as $engagement) {
      $engagements[] = $engagement['value'];
    }
    $variables['engagements'] = implode(', ', $engagements);
  }

  $address = $donor_profile['field_city_state'][LANGUAGE_NONE][0];
  if (!empty($address['locality'])) {
    $variables['citystate'] = implode(', ', array(
      $address['locality'],
      $address['administrative_area'],
    ));
  }
}

/**
 * Implements hook_preprocess_hook() for proposal-giving-history.tpl.php.
 */
function create_proposal_preprocess_proposal_giving_history(&$variables) {
  $proposal = $variables['proposal'];

  $variables['what_organizations_has_the'] = $proposal->field_what_organizations_has_the[LANGUAGE_NONE][0]['value'];
  $variables['what_did_the_client_like_d'] = $proposal->field_what_did_the_client_like_d[LANGUAGE_NONE][0]['value'];
  $variables['how_many_hours_per_year_di'] = $proposal->field_how_many_hours_per_year_di[LANGUAGE_NONE][0]['value'];
  $variables['does_the_family_have_an_es'] = $proposal->field_does_the_family_have_an_es[LANGUAGE_NONE][0]['value'];
  $variables['what_does_the_client_like_'] = $proposal->field_what_does_the_client_like_[LANGUAGE_NONE][0]['value'];

  if ($proposal->field_does_the_family_currently_[LANGUAGE_NONE][0]['value']) {
    $variables['advisor_name'] = $proposal->field_advisor_name[LANGUAGE_NONE][0]['value'];
    $variables['advisor_firm'] = $proposal->field_advisor_firm[LANGUAGE_NONE][0]['value'];
    $variables['advisor_contact'] = $proposal->field_advisor_contact[LANGUAGE_NONE][0]['value'];
  }

  if ($proposal->field_charitable_vehicle[LANGUAGE_NONE][0]['value']) {
    $variables['vehicle_name'] = $proposal->field_vehicle_name[LANGUAGE_NONE][0]['value'];
    $variables['giving_vehicle_type'] = $proposal->field_giving_vehicle_type[LANGUAGE_NONE][0]['value'];
  }

  $variables['contribution_funding'] = $proposal->field_contribution_funding[LANGUAGE_NONE][0]['value'];
  $variables['how_does_the_client_plan_o'] = $proposal->field_how_does_the_client_plan_o[LANGUAGE_NONE][0]['value'];
  $variables['what_is_the_intended_distr'] = $proposal->field_what_is_the_intended_distr[LANGUAGE_NONE][0]['value'];

  setlocale(LC_MONETARY, 'en_US');
  $variables['planned_initial_contributi'] = money_format('%n', $proposal->field_planned_initial_contributi[LANGUAGE_NONE][0]['value']);
  $variables['planned_annual_contributio'] = money_format('%n', $proposal->field_planned_annual_contributio[LANGUAGE_NONE][0]['value']);
}

/**
 * HelloSign Callback Hook.
 *
 * @param array $data
 *   The data sent by HelloSign.
 */
function create_proposal_process_hellosign_callback(array $data) {

  // Log callback.
  watchdog('proposal', 'HelloSign event received: @event', array('@event' => print_r($data, 1)));
  $event = $data->event->event_type;

  // Alert Benefunder for these events.
  $email_events = [
    'signature_request_sent',
    'signature_request_declined',
    'signature_request_all_signed',
    'signature_request_email_bounce',
  ];

  // Find proposal node with matching request id.
  $signature_request_id = $data->signature_request->signature_request_id;
  $q = new EntityFieldQuery();
  $q->fieldCondition('field_signature_id', $signature_request_id);
  $q->entityCondition('bundle', 'giving_proposal');
  $q->range(0, 1);
  $result = $q->execute();

  if (isset($result['node'])) {
    $proposal_nid = current(array_keys($result['node']));
    $wrapper = entity_metadata_wrapper('node', $proposal_nid);
  }
  else {
    watchdog('proposal', 'No proposal found with signature request id %id', array(
      '%id' => $signature_request_id,
    ), WATCHDOG_ERROR);
  }

  if (in_array($event, $email_events)) {
    $params = [
      'event' => $event,
      'proposal_name' => $wrapper->label(),
      'proposal_url' => url('node/' . $proposal_nid . '/edit', array(
        'absolute' => TRUE,
        'https' => TRUE,
      )),
    ];
    drupal_mail('create_proposal', 'hellosign-event', 'hellosign@benefunder.com', LANGUAGE_NONE, $params);
  }

  switch ($event) {
    // Execute initial disbursements.
    case 'signature_request_all_signed':
      create_proposal_signature_all_signed($proposal_nid, $event->signatures);
      $wrapper->save();
      break;

    // Update proposal status.
    case 'signature_request_declined':
      _create_proposal_set_status('Rejected', $wrapper);
      $wrapper->save();
      break;
  }
}



/**
 * Sends a disbursement letter to each school involved.
 *
 * @param $proposal_nid
 */
function create_proposal_signature_all_signed($proposal_nid, $signatures_array) {
  $proposal_wrapper = entity_metadata_wrapper('node', $proposal_nid);

  $amount = _create_proposal_calculate_disbusement_amount($proposal_wrapper);
  $frequency = $proposal_wrapper->field_disbursement_frequency->value();

  // Group causes by school.
  $proposal_schools = array();
  foreach ($proposal_wrapper->field_cause as $collection) {
    $uni = array_pop($collection->field_cause_name->field_university_or_institution->value());
    $proposal_schools[$uni->tid][$collection->field_cause_name->label()] =
      number_format($amount * $collection->field_cause_allocation->value(), 2);
  }

  // Send email to DAF to disburse funds.
  $daf_email = $proposal_wrapper->field_daf_provider->field_daf_email->value();

  // TODO: Include gift letter somehow. PDF attachment? Send multiple emails?
  $params = array(
    '@frequency' => $frequency,
    'schools' => $proposal_schools,
  );
  drupal_mail('create_proposal', 'disburse', $daf_email, LANGUAGE_NONE, $params);

  $status = ($frequency == 'One Time') ? 'Complete' : 'Continuing';
  _create_proposal_set_status($status, $proposal_wrapper);
}

/**
 * Implements hook_mail().
 */
function create_proposal_mail($key, &$message, $params) {
  switch ($key) {
    case 'hellosign-event':
      $message['subject'] = t('Proposal @name HelloSign @event', array(
        '@name' => $params['proposal_name'],
        '@event' => $params['event'],
      ));
      $message['body'][] = t('This proposal has received the HelloSign event @event.', array(
        '@event' => $params['event'],
      ));
      $message['body'][] = t('You may edit this proposal at @url.', array(
        '@url' => $params['proposal_url'],
      ));
      break;

    case 'proposal_help':
      $message['subject'] = t('Proposal help has been requested');
      $body = "Request:\n @text";
      $message['body'][] = strtr($body, $params);
      break;

    case 'disburse':
      // TODO: where are funds being dispersed *from*?
      $message['subject'] = t('Disbursement request');
      $body[] = 'Disbursement frequency: ' . $params['@frequency'];
      $i = 0;
      foreach ($params['schools'] as $school_tid) {
        $school_wrapper = entity_metadata_wrapper('taxonomy_term', $school_tid);
        $body[] = 'Benefunder Charitable Innovation Fund Account Name: ';
        $body[] = 'University or Institution Name: ' . $school_wrapper->label();
        $body[] = 'University or Institution ABA Number: ' . $school_wrapper->field_daf_aba->value();
        $body[] = 'University or Institution ACH Number: ' . $school_wrapper->field_daf_ach->value();
        $body[] = 'University or Institution Account Number: ' . $school_wrapper->field_account_number->value();
        foreach ($params['schools'][$school_tid] as $title => $amount) {
          $body[] = t('Grant #@count Lab: @lab', array(
            '@count' => $i,
            '@lab' => $title)
          );
          $body[] = t('Grant #@count Amount: @amt', array(
            '@count' => $i,
            '@amt' => $amount)
          );
          $i++;
        }
        $body[] = '';
      }
      $message['body'] = $body;
      break;

    case 'researcher-confirmation':
      $message['subject'] = t('Good news! Funding arrived through Benefunder.com');
      $body = <<<ENDCONFIRMATION
Dear @researcher,\n
\n
Benefunder is pleased to let you know that @amount has been donated to your lab. Funding is expected
to arrive within 30 days, please contact us at info@benefunder.com if you have any questions.\n
\n
A funds transfer request has been provided on @date with the following details:\n
Transfer request number: @reqnum\n
Amount: @amount\n
Payee: @payee\n
\n
Congratulations,\n
Benefunder Staff\n
ENDCONFIRMATION;
      $message['body'][] = strtr($body, $params);
      break;

    case 'donor-thank-you':
      $message['subject'] = t('Thank you for your donation');
      $body = <<<ENDTHANKYOU
Dear @name,\n
\n
Thank you! We are elated by your decision to support research through Benefunder.com. Your gift will have a big impact on
their work. It will also serve as an example for others to connect - through Benefunder  - to researchers more directly
than was ever possible before.\n
\n
We would love to arrange a lab visit including a tour, discussion, and an opportunity to meet the students
and postdocs involved. Benefunder will arrange the details if you would like to take advantage of this opportunity.\n
\n
Again, thank you so much for your generous gift. We hope that today marks the beginning of a long and fulfilling
relationship.\n
\n
Best wishes,\n
Benefunder Staff\n
ENDTHANKYOU;
      break;
      $message['body'][] = strtr($body, $params);
  }
}

/**
 * Get Gift Letter body.
 *
 * Not in hook_mail since we never send this letter directly.
 *
 * @payee_name
 * @payee_contact_name
 * @payee_address
 * @payee_city
 * @payee_state
 * @payee_zip
 * @date
 * @payee_contact_name
 * @payee_name
 * @source
 * @amount
 * @researcher
 * @profile_url
 * @bankname
 * @reqnum
 *
 * @return string
 */
function _create_proposal_get_gift_letter_body($params) {
  $body = <<<ENDGIFT
@payee_name\n
c/o @payee_contact_name\n
@payee_address\n
@payee_city, @payee_state @payee_zip\n
\n
@date\n
\n
Dear @payee_contact_name,\n
\n
I am pleased to attach a grant from Benefunder Foundation to @payee_name. An account advisor has recommended the following grant:\n
\n
Donor Advised Account Name: @source\n
Grantee Organization: @payee_name\n
Amount: @amount\n
Grant Purpose: For @researcher lab\n
\n
The grant is a gift from Benefunder Foundation and must be used for the purposes outlined in @researcher's profile as
presented on the Benefunder website:\n
\n
@profile_url\n
\n
A funds transfer request was provided to @bankname on @date with the following details:\n
Transfer request number: @reqnum\n
Amount: @amount\n
Payee: @payee_name\n
\n
Sincerely,
Christian Braemer, CEO\n
\n
Benefunder Foundation Tax Identification Number: 46-430321\n
4790 Eastgate Mall Suite #125\n
San Diego, CA 92121\n
(858) 215-1136\n
ENDGIFT;
  return strtr($body, $params);
}

/**
 * Extract array of signers suitable to sending to hellosign.
 */
function _create_proposal_get_signers($proposal_wrapper) {
  $signers = array();
  foreach ($proposal_wrapper->field_signer_emails as $collection) {
    $signers[$collection->field_signer_email->value()] = $collection->field_signer_name->value();
  }
  return $signers;
}

/**
 * Lookup and set proposal status field on a giving proposal.
 *
 * @param $status
 * @param $wrapper
 */
function _create_proposal_set_status($status, $wrapper) {
  $term_array = taxonomy_get_term_by_name($status, 'plan_status');
  $wrapper->field_proposal_status = array_pop($term_array)->tid;
}

function _create_proposal_calculate_disbusement_amount($proposal_wrapper) {
  $proposal_wrapper = entity_metadata_wrapper('node', $proposal_wrapper);

  // Calculate amount to disburse initially.
  setlocale(LC_MONETARY, 'en_US');
  $frequency = $proposal_wrapper->field_disbursement_frequency->value();
  $dist_percent = $proposal_wrapper->field_what_is_the_intended_distr->value() / 100;
  $amount = $proposal_wrapper->field_planned_initial_contributi->value() * $dist_percent;
  switch ($frequency) {
    case 'Quarterly':
      $amount /= 4;
      break;

    case '6 Months':
      $amount /= 2;

    case 'One Time':
    case 'Annually':
      // No-op.
      break;

    default:
      throw new Exception('Unknown frequency');
  }
  return $amount;
}
