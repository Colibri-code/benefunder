<?php
/**
 * @file
 * Code for the BF Cause feature.
 */

include_once 'bf_cause.features.inc';

/**
 * Implements hook_media_browser_plugins_alter().
 *
 * Removes the Upload tab from video fields that should
 * not allow any uploads (using youtube/vimeo links instead).
 *
 * @param $plugins
 */
function bf_cause_media_browser_plugins_alter(&$plugins) {
  $valid_extensions = $plugins['upload']['form'][0]['#validators']['file_validate_extensions'][0];
  // The unwanted video fields have allowed extensions of 'txt'.
  if ($valid_extensions == 'txt') {
    unset($plugins['upload']);
  }
}

/**
 * Implements hook_token_info().
 */
function bf_cause_token_info() {
  $info['tokens']['node']['top_research_area'] = array(
    'name' => t('Top Research Area'),
    'description' => t('One of Life, Technology, Humanities, Environment.'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function bf_cause_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    // Top-level terms in Research Area vocabulary.
    $depth = 1;
    $vocabulary = taxonomy_vocabulary_machine_name_load('research_area');
    $terms = taxonomy_get_tree($vocabulary->vid, 0, $depth);
    foreach ($terms as $term) {
      // Convert Life to Life Science.
      $top_level[$term->tid] = $term->name;
    }

    foreach ($tokens as $name => $original) {
      if ($name == 'top_research_area') {
        foreach ($node->field_research_area[LANGUAGE_NONE] as $delta => $value) {
          if (isset($top_level[$value['tid']])) {
            $replacements[$original] = $top_level[$value['tid']];
            break;
          }
        }
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_node_update().
 */
function bf_cause_node_update($node) {
  if ($node->type == 'cause') {
    $language = $node->language;
    $first_changed = ($node->original->field_first_name[$language][0]['value'] != $node->field_first_name[$language][0]['value']);
    $last_changed = ($node->original->field_last_name[$language][0]['value'] != $node->field_last_name[$language][0]['value']);

    if ($first_changed || $last_changed) {
      _bf_cause_make_first_last_redirect($node);
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function bf_cause_node_insert($node) {
  if ($node->type == 'cause') {
    _bf_cause_make_first_last_redirect($node);
  }
}

/**
 * Create a redirect from [first]-[last] to cause node if needed.
 *
 * @param $node
 *
 * @throws \Exception
 */
function _bf_cause_make_first_last_redirect($node) {
  $firstlast = bf_cause_get_short_alias($node);
  $language = $node->language;

  // Create [first]-[last] redirect if it doesn't already exist.
  if (redirect_load_by_source($firstlast, $language) === FALSE) {
    $redirect = new stdClass();
    redirect_object_prepare($redirect);
    $redirect->source = $firstlast;
    $redirect->redirect = 'node/' . $node->nid;
    redirect_save($redirect);
  }
}

/**
 * Gets the short name alias for a cause, [first]-[last].
 */
function bf_cause_get_short_alias($node) {
  if ($node->type == 'cause') {
    // Use pathauto to create redirect path from tokens.
    module_load_include('inc', 'pathauto', 'pathauto');
    $pattern = '[node:field_first_name]-[node:field_last_name]';
    $data = array('node' => $node);
    $language = $node->language;
    $alias = token_replace($pattern, $data, array(
      'sanitize' => FALSE,
      'clear' => TRUE,
      'callback' => 'pathauto_clean_token_values',
      'language' => (object) array('language' => $language),
      'pathauto' => TRUE,
    ));
    return pathauto_clean_alias($alias);
  }
}
